#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API —Ç—Ä–∞—Å—Å —Å–∫–∞–ª–æ–¥—Ä–æ–º–∞
–ó–∞–ø—É—Å–∫: python test_api.py
"""

import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://127.0.0.1:8000/api"

def print_response(response, title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ API"""
    print(f"\n{'='*50}")
    print(f" {title}")
    print(f"{'='*50}")
    print(f"Status Code: {response.status_code}")
    try:
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    except:
        print(f"Response: {response.text}")

def test_basic_crud():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• CRUD –û–ü–ï–†–ê–¶–ò–ô")
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Å—Å
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Å—Å...")
    response = requests.get(f"{BASE_URL}/routes/")
    print_response(response, "–°–ü–ò–°–û–ö –¢–†–ê–°–°")
    
    # 2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞—Å—Å—É
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞—Å—Å—ã...")
    new_route = {
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞",
        "difficulty": "medium",
        "author": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä",
        "color": "–æ—Ä–∞–Ω–∂–µ–≤—ã–π",
        "description": "–¢—Ä–∞—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"
    }
    response = requests.post(f"{BASE_URL}/routes/", json=new_route)
    print_response(response, "–°–û–ó–î–ê–ù–ò–ï –¢–†–ê–°–°–´")
    
    if response.status_code == 201:
        route_id = response.json()['id']
        
        # 3. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞—Å—Å—É
        print(f"\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —Å ID {route_id}...")
        response = requests.get(f"{BASE_URL}/routes/{route_id}/")
        print_response(response, f"–¢–†–ê–°–°–ê ID {route_id}")
        
        # 4. –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞—Å—Å—É
        print(f"\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —Å ID {route_id}...")
        update_data = {
            "name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞",
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        }
        response = requests.patch(f"{BASE_URL}/routes/{route_id}/", json=update_data)
        print_response(response, f"–û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–†–ê–°–°–´ ID {route_id}")
        
        # 5. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        print(f"\n5. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Å—Å—ã ID {route_id}...")
        response = requests.post(f"{BASE_URL}/routes/{route_id}/toggle-active/")
        print_response(response, f"–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –¢–†–ê–°–°–´ ID {route_id}")
        
        return route_id
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞—Å—Å—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return None

def test_bulk_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    
    # 1. –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å
    print("\n1. –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å...")
    bulk_routes = {
        "routes": [
            {
                "name": "–ú–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞ 1",
                "difficulty": "easy",
                "author": "–ú–∞—Å—Å–æ–≤—ã–π –∞–≤—Ç–æ—Ä",
                "color": "—Ä–æ–∑–æ–≤—ã–π",
                "description": "–ü–µ—Ä–≤–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞"
            },
            {
                "name": "–ú–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞ 2",
                "difficulty": "hard",
                "author": "–ú–∞—Å—Å–æ–≤—ã–π –∞–≤—Ç–æ—Ä",
                "color": "–≥–æ–ª—É–±–æ–π",
                "description": "–í—Ç–æ—Ä–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞"
            },
            {
                "name": "–ú–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞ 3",
                "difficulty": "expert",
                "author": "–î—Ä—É–≥–æ–π –∞–≤—Ç–æ—Ä",
                "color": "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π",
                "description": "–¢—Ä–µ—Ç—å—è –º–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∞"
            }
        ]
    }
    response = requests.post(f"{BASE_URL}/routes/bulk/", json=bulk_routes)
    print_response(response, "–ú–ê–°–°–û–í–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–°–°")
    
    # –ü–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    created_ids = []
    if response.status_code in [201, 207]:
        for route in response.json().get('created_routes', []):
            created_ids.append(route['id'])
    
    # 2. –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å
    if created_ids:
        print(f"\n2. –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å...")
        bulk_updates = {
            "updates": [
                {
                    "id": created_ids[0],
                    "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ç—Ä–∞—Å—Å—ã 1"
                },
                {
                    "id": created_ids[1],
                    "is_active": False
                }
            ]
        }
        response = requests.post(f"{BASE_URL}/routes/bulk-update/", json=bulk_updates)
        print_response(response, "–ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–†–ê–°–°")
        
        # 3. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å
        print(f"\n3. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å...")
        bulk_delete = {
            "route_ids": created_ids
        }
        response = requests.delete(f"{BASE_URL}/routes/bulk/", json=bulk_delete)
        print_response(response, "–ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –¢–†–ê–°–°")

def test_search_and_filters():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
    
    # 1. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    print("\n1. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
    response = requests.get(f"{BASE_URL}/routes/search/?name=—Ç–µ—Å—Ç")
    print_response(response, "–ü–û–ò–°–ö –ü–û –ù–ê–ó–í–ê–ù–ò–Æ")
    
    # 2. –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("\n2. –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
    response = requests.get(f"{BASE_URL}/routes/search/?difficulty=medium")
    print_response(response, "–§–ò–õ–¨–¢–† –ü–û –°–õ–û–ñ–ù–û–°–¢–ò")
    
    # 3. –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
    print("\n3. –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É...")
    response = requests.get(f"{BASE_URL}/routes/search/?author=—Ç–µ—Å—Ç")
    print_response(response, "–§–ò–õ–¨–¢–† –ü–û –ê–í–¢–û–†–£")
    
    # 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    print("\n4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
    response = requests.get(f"{BASE_URL}/routes/search/?difficulty=easy&is_active=true&ordering=name")
    print_response(response, "–ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ò–°–ö")

def test_additional_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö endpoints"""
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• ENDPOINTS")
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
    response = requests.get(f"{BASE_URL}/difficulty-levels/")
    print_response(response, "–£–†–û–í–ù–ò –°–õ–û–ñ–ù–û–°–¢–ò")
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    response = requests.get(f"{BASE_URL}/stats/")
    print_response(response, "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–°–°")
    
    # 3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤...")
    response = requests.get(f"{BASE_URL}/routes/authors/")
    print_response(response, "–°–ü–ò–°–û–ö –ê–í–¢–û–†–û–í")
    
    # 4. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤
    print("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤...")
    response = requests.get(f"{BASE_URL}/routes/colors/")
    print_response(response, "–°–ü–ò–°–û–ö –¶–í–ï–¢–û–í")

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞—Å—Å—É
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞—Å—Å—ã...")
    response = requests.get(f"{BASE_URL}/routes/99999/")
    print_response(response, "–ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –¢–†–ê–°–°–ê")
    
    # 2. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞—Å—Å—É —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    invalid_route = {
        "name": "",  # –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "difficulty": "invalid",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        "author": "",  # –ü—É—Å—Ç–æ–π –∞–≤—Ç–æ—Ä
        "color": ""  # –ü—É—Å—Ç–æ–π —Ü–≤–µ—Ç
    }
    response = requests.post(f"{BASE_URL}/routes/", json=invalid_route)
    print_response(response, "–ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –¢–†–ê–°–° –°–ö–ê–õ–û–î–†–û–ú–ê")
    print(f"–ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        response = requests.get(f"{BASE_URL}/stats/")
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
            return
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_basic_crud()
        test_bulk_operations()
        test_search_and_filters()
        test_additional_endpoints()
        test_error_handling()
        
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª climbing_routes.log")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
