#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥
"""
import os
import sys
import django
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'climbing_routes_project.settings')
django.setup()

from routes.models import Route, AdminUser

def upload_data_to_hosting():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥...")
    
    base_url = "http://koterik.pythonanywhere.com"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    routes = Route.objects.all()
    admin_users = AdminUser.objects.all()
    
    print(f"üìä –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –¢—Ä–∞—Å—Å: {routes.count()}")
    print(f"   –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {admin_users.count()}")
    
    if routes.count() == 0:
        print("‚ùå –í –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –Ω–µ—Ç —Ç—Ä–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return
    
    if admin_users.count() == 0:
        print("‚ùå –í –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –Ω–µ—Ç –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session = requests.Session()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        login_page = session.get(f"{base_url}/api/login/")
        csrf_token = None
        for cookie in session.cookies:
            if cookie.name == 'csrftoken':
                csrf_token = cookie.value
                break
        
        if not csrf_token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω")
            return
        
        print(f"üîë CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {csrf_token[:20]}...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        routes_data = []
        for route in routes:
            route_data = {
                'track_lane': route.track_lane,
                'name': route.name,
                'difficulty': route.difficulty,
                'color': route.color,
                'author': route.author,
                'setup_date': str(route.setup_date) if route.setup_date else '',
                'description': route.description or '',
                'is_active': route.is_active
            }
            routes_data.append(route_data)
        
        print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(routes_data)} —Ç—Ä–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞—Å—Å—ã –ø–æ —á–∞—Å—Ç—è–º (–ø–æ 10 —à—Ç—É–∫)
        batch_size = 10
        uploaded_count = 0
        
        for i in range(0, len(routes_data), batch_size):
            batch = routes_data[i:i + batch_size]
            
            print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞—Å—Å—ã {i+1}-{min(i+batch_size, len(routes_data))}...")
            
            headers = {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrf_token
            }
            
            response = session.post(
                f"{base_url}/api/routes/bulk/",
                json={'routes': batch},
                headers=headers
            )
            
            if response.status_code in [200, 201]:
                uploaded_count += len(batch)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(batch)} —Ç—Ä–∞—Å—Å")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_count} —Ç—Ä–∞—Å—Å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        check_response = requests.get(f"{base_url}/api/stats/")
        
        if check_response.status_code == 200:
            stats = check_response.json()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ: {stats['total_routes']} —Ç—Ä–∞—Å—Å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

if __name__ == "__main__":
    upload_data_to_hosting()
