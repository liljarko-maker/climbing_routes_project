#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Å—Å —Å–∫–∞–ª–æ–¥—Ä–æ–º–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É API –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞
"""

import json
import time
from datetime import datetime
from typing import Dict, List, Any

class RouteAPI:
    """–°–∏–º—É–ª—è—Ü–∏—è API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞—Å—Å–∞–º–∏"""
    
    def __init__(self):
        self.routes = []
        self.next_id = 1
        self.difficulty_levels = [
            {"value": "easy", "label": "–õ–µ–≥–∫–∞—è"},
            {"value": "medium", "label": "–°—Ä–µ–¥–Ω—è—è"},
            {"value": "hard", "label": "–°–ª–æ–∂–Ω–∞—è"},
            {"value": "expert", "label": "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è"}
        ]
    
    def validate_route_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å—ã"""
        errors = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'difficulty', 'author', 'color']
        for field in required_fields:
            if not data.get(field) or not str(data[field]).strip():
                errors[field] = f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if 'difficulty' in data:
            valid_difficulties = [level['value'] for level in self.difficulty_levels]
            if data['difficulty'] not in valid_difficulties:
                errors['difficulty'] = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_difficulties)}"
        
        return errors
    
    def create_route(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞—Å—Å—ã"""
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã: {data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        errors = self.validate_route_data(data)
        if errors:
            return {
                "success": False,
                "errors": errors,
                "message": "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã
        route = {
            "id": self.next_id,
            "name": data['name'].strip(),
            "difficulty": data['difficulty'],
            "difficulty_display": next(
                level['label'] for level in self.difficulty_levels 
                if level['value'] == data['difficulty']
            ),
            "author": data['author'].strip(),
            "color": data['color'].strip(),
            "created_at": datetime.now().isoformat() + "Z",
            "description": data.get('description', '').strip(),
            "is_active": data.get('is_active', True)
        }
        
        self.routes.append(route)
        self.next_id += 1
        
        print(f"‚úÖ –¢—Ä–∞—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ID: {route['id']}")
        return {
            "success": True,
            "route": route,
            "message": f"–¢—Ä–∞—Å—Å–∞ '{route['name']}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        }
    
    def get_routes(self, filters: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Å—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Å—Å...")
        
        filtered_routes = self.routes.copy()
        
        if filters:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            if 'difficulty' in filters:
                filtered_routes = [r for r in filtered_routes if r['difficulty'] == filters['difficulty']]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
            if 'author' in filters:
                filtered_routes = [r for r in filtered_routes if filters['author'].lower() in r['author'].lower()]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É
            if 'color' in filters:
                filtered_routes = [r for r in filtered_routes if filters['color'].lower() in r['color'].lower()]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if 'is_active' in filters:
                filtered_routes = [r for r in filtered_routes if r['is_active'] == filters['is_active']]
            
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if 'search' in filters:
                search_term = filters['search'].lower()
                filtered_routes = [r for r in filtered_routes if search_term in r['name'].lower()]
        
        return {
            "success": True,
            "routes": filtered_routes,
            "count": len(filtered_routes),
            "message": f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_routes)} —Ç—Ä–∞—Å—Å"
        }
    
    def get_route(self, route_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞—Å—Å—ã"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞—Å—Å—ã —Å ID: {route_id}")
        
        for route in self.routes:
            if route['id'] == route_id:
                return {
                    "success": True,
                    "route": route,
                    "message": f"–¢—Ä–∞—Å—Å–∞ '{route['name']}' –Ω–∞–π–¥–µ–Ω–∞"
                }
        
        return {
            "success": False,
            "error": "–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "message": f"–¢—Ä–∞—Å—Å–∞ —Å ID {route_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }
    
    def update_route(self, route_id: int, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã"""
        print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —Å ID: {route_id}")
        
        for i, route in enumerate(self.routes):
            if route['id'] == route_id:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π)
                validation_data = {k: v for k, v in data.items() if v is not None}
                errors = self.validate_route_data(validation_data)
                if errors:
                    return {
                        "success": False,
                        "errors": errors,
                        "message": "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
                    }
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
                for key, value in data.items():
                    if value is not None:
                        route[key] = value.strip() if isinstance(value, str) else value
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                if 'difficulty' in data:
                    route['difficulty_display'] = next(
                        level['label'] for level in self.difficulty_levels 
                        if level['value'] == data['difficulty']
                    )
                
                print(f"‚úÖ –¢—Ä–∞—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {route['name']}")
                return {
                    "success": True,
                    "route": route,
                    "message": f"–¢—Ä–∞—Å—Å–∞ '{route['name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                }
        
        return {
            "success": False,
            "error": "–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "message": f"–¢—Ä–∞—Å—Å–∞ —Å ID {route_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }
    
    def delete_route(self, route_id: int) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã"""
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —Å ID: {route_id}")
        
        for i, route in enumerate(self.routes):
            if route['id'] == route_id:
                deleted_route = self.routes.pop(i)
                print(f"‚úÖ –¢—Ä–∞—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_route['name']}")
                return {
                    "success": True,
                    "message": f"–¢—Ä–∞—Å—Å–∞ '{deleted_route['name']}' —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                }
        
        return {
            "success": False,
            "error": "–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "message": f"–¢—Ä–∞—Å—Å–∞ —Å ID {route_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        total_routes = len(self.routes)
        active_routes = len([r for r in self.routes if r['is_active']])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_stats = {}
        for level in self.difficulty_levels:
            count = len([r for r in self.routes if r['difficulty'] == level['value']])
            difficulty_stats[level['value']] = {
                "label": level['label'],
                "count": count
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
        color_stats = {}
        for route in self.routes:
            color = route['color']
            color_stats[color] = color_stats.get(color, 0) + 1
        
        return {
            "success": True,
            "stats": {
                "total_routes": total_routes,
                "active_routes": active_routes,
                "inactive_routes": total_routes - active_routes,
                "difficulty_distribution": difficulty_stats,
                "color_distribution": color_stats
            },
            "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        }

def print_response(response: Dict[str, Any], title: str = "API Response"):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ API"""
    print(f"\n{'='*60}")
    print(f" {title}")
    print(f"{'='*60}")
    print(json.dumps(response, indent=2, ensure_ascii=False))

def demo_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã API"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò API –¢–†–ê–°–° –°–ö–ê–õ–û–î–†–û–ú–ê")
    print("=" * 60)
    
    api = RouteAPI()
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å
    print("\n1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–°–°")
    print("-" * 30)
    
    test_routes = [
        {
            "name": "–ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è",
            "difficulty": "medium",
            "author": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            "color": "–∫—Ä–∞—Å–Ω—ã–π",
            "description": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç—Ä–∞—Å—Å–∞ —Å —Ç–µ—Ö–Ω–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏"
        },
        {
            "name": "–°–∏–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç",
            "difficulty": "easy",
            "author": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
            "color": "—Å–∏–Ω–∏–π",
            "description": "–ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞—Å—Å–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
        },
        {
            "name": "–ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞",
            "difficulty": "expert",
            "author": "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤",
            "color": "—á–µ—Ä–Ω—ã–π",
            "description": "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Å–∫–∞–ª–æ–ª–∞–∑–æ–≤"
        }
    ]
    
    for route_data in test_routes:
        response = api.create_route(route_data)
        print_response(response, f"–°–û–ó–î–ê–ù–ò–ï: {route_data['name']}")
        time.sleep(0.5)
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Å—Å
    print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –¢–†–ê–°–°")
    print("-" * 30)
    response = api.get_routes()
    print_response(response, "–°–ü–ò–°–û–ö –í–°–ï–• –¢–†–ê–°–°")
    
    # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("\n3Ô∏è‚É£ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –°–õ–û–ñ–ù–û–°–¢–ò")
    print("-" * 30)
    response = api.get_routes({"difficulty": "medium"})
    print_response(response, "–°–†–ï–î–ù–ò–ï –¢–†–ê–°–°–´")
    
    # 4. –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
    print("\n4Ô∏è‚É£ –ü–û–ò–°–ö –ü–û –ê–í–¢–û–†–£")
    print("-" * 30)
    response = api.get_routes({"author": "–ò–≤–∞–Ω"})
    print_response(response, "–¢–†–ê–°–°–´ –ê–í–¢–û–†–ê –ò–í–ê–ù")
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞—Å—Å—ã
    print("\n5Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–†–ê–°–°–´")
    print("-" * 30)
    response = api.get_route(1)
    print_response(response, "–¢–†–ê–°–°–ê ID 1")
    
    # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã
    print("\n6Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–†–ê–°–°–´")
    print("-" * 30)
    update_data = {
        "name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è",
        "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã"
    }
    response = api.update_route(1, update_data)
    print_response(response, "–û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–†–ê–°–°–´ ID 1")
    
    # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n7Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("-" * 30)
    response = api.get_stats()
    print_response(response, "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–°–°")
    
    # 8. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("\n8Ô∏è‚É£ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("-" * 30)
    print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ç—Ä–∞—Å—Å—ã!")
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    
    while True:
        print("\n" + "="*40)
        print("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –¢–†–ê–°–°–´")
        print("="*40)
        
        name = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã: ").strip()
        if name.lower() == 'quit':
            break
        
        print("–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: easy, medium, hard, expert")
        difficulty = input("–°–ª–æ–∂–Ω–æ—Å—Ç—å: ").strip()
        
        author = input("–ê–≤—Ç–æ—Ä: ").strip()
        color = input("–¶–≤–µ—Ç: ").strip()
        description = input("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
        
        route_data = {
            "name": name,
            "difficulty": difficulty,
            "author": author,
            "color": color,
            "description": description
        }
        
        response = api.create_route(route_data)
        print_response(response, "–†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø")
        
        if response["success"]:
            print(f"\nüéâ –¢—Ä–∞—Å—Å–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞—Å—Å—ã: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print(" –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    response = api.get_stats()
    print_response(response, "–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ API —Ç—Ä–∞—Å—Å —Å–∫–∞–ª–æ–¥—Ä–æ–º–∞!")

if __name__ == "__main__":
    demo_api()
