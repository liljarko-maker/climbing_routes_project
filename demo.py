#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
–ó–∞–ø—É—Å–∫: python demo.py
"""

import requests
import json
import time

BASE_URL = "http://127.0.0.1:8000/api"

def demo_quick_test():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π API"""
    print("üéØ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –¢–†–ê–°–° –°–ö–ê–õ–û–î–†–û–ú–ê")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞—Å—Å
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞—Å—Å...")
    test_routes = [
        {
            "name": "–ö—Ä–∞—Å–Ω–∞—è —Å—Ç–µ–Ω–∞",
            "difficulty": "easy",
            "author": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            "color": "–∫—Ä–∞—Å–Ω—ã–π",
            "description": "–ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞—Å—Å–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
        },
        {
            "name": "–°–∏–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç",
            "difficulty": "medium",
            "author": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
            "color": "—Å–∏–Ω–∏–π",
            "description": "–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å —Ç–µ—Ö–Ω–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏"
        },
        {
            "name": "–ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞",
            "difficulty": "expert",
            "author": "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤",
            "color": "—á–µ—Ä–Ω—ã–π",
            "description": "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Å–∫–∞–ª–æ–ª–∞–∑–æ–≤"
        }
    ]
    
    created_routes = []
    for route in test_routes:
        response = requests.post(f"{BASE_URL}/routes/", json=route)
        if response.status_code == 201:
            created_routes.append(response.json())
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {route['name']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {route['name']}")
    
    # 2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞—Å—Å—ã
    print(f"\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞—Å—Å ({len(created_routes)} —Å–æ–∑–¥–∞–Ω–æ)...")
    response = requests.get(f"{BASE_URL}/routes/")
    if response.status_code == 200:
        routes = response.json()
        print(f"   üìä –í—Å–µ–≥–æ —Ç—Ä–∞—Å—Å –≤ –±–∞–∑–µ: {len(routes)}")
        for route in routes[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
            print(f"   ‚Ä¢ {route['name']} ({route['difficulty_display']}) - {route['author']}")
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print(f"\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Å—Å...")
    response = requests.get(f"{BASE_URL}/routes/search/?difficulty=medium")
    if response.status_code == 200:
        results = response.json()
        print(f"   üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Å—Å: {results['count']}")
        for route in results['results']:
            print(f"   ‚Ä¢ {route['name']} - {route['author']}")
    
    # 4. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Å—Å...")
    response = requests.get(f"{BASE_URL}/stats/")
    if response.status_code == 200:
        stats = response.json()
        print(f"   üìà –í—Å–µ–≥–æ —Ç—Ä–∞—Å—Å: {stats['total_routes']}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_routes']}")
        print(f"   ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_routes']}")
        
        print(f"   üìä –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        for difficulty, data in stats['difficulty_distribution'].items():
            print(f"     ‚Ä¢ {data['label']}: {data['count']}")
    
    # 5. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    print(f"\n5Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤...")
    response = requests.get(f"{BASE_URL}/routes/authors/")
    if response.status_code == 200:
        authors = response.json()
        print(f"   üë• –ê–≤—Ç–æ—Ä–æ–≤: {len(authors)}")
        for author in authors:
            print(f"   ‚Ä¢ {author['name']}: {author['total_routes']} —Ç—Ä–∞—Å—Å")
    
    # 6. –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    print(f"\n6Ô∏è‚É£ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å...")
    bulk_routes = {
        "routes": [
            {
                "name": "–ó–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è",
                "difficulty": "easy",
                "author": "–î–µ–º–æ –∞–≤—Ç–æ—Ä",
                "color": "–∑–µ–ª–µ–Ω—ã–π"
            },
            {
                "name": "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è –º–µ—á—Ç–∞",
                "difficulty": "hard",
                "author": "–î–µ–º–æ –∞–≤—Ç–æ—Ä",
                "color": "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π"
            }
        ]
    }
    response = requests.post(f"{BASE_URL}/routes/bulk/", json=bulk_routes)
    if response.status_code in [201, 207]:
        result = response.json()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {len(result.get('created_routes', []))} —Ç—Ä–∞—Å—Å")
        if result.get('errors'):
            print(f"   ‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(result['errors'])}")
    
    print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"   üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: {BASE_URL}")
    print(f"   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {BASE_URL}/routes/")
    print(f"   üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://127.0.0.1:8000/admin/")

def check_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(f"{BASE_URL}/stats/", timeout=5)
        return response.status_code == 200
    except:
        return False

def main():
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –¢–†–ê–°–° –°–ö–ê–õ–û–î–†–û–ú–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    if not check_server():
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   python manage.py runserver")
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!")
    time.sleep(1)
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_quick_test()

if __name__ == "__main__":
    main()
